
Proyecto1_Slave_Ultrasonico.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000059a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000526  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  0000059a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000059a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  0000060c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000834  00000000  00000000  00000654  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000072c  00000000  00000000  00000e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ce  00000000  00000000  000015b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  00001984  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f8  00000000  00000000  000019fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000108  00000000  00000000  00001df4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001efc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 a4 00 	jmp	0x148	; 0x148 <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 30       	cpi	r26, 0x05	; 5
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  88:	0c 94 91 02 	jmp	0x522	; 0x522 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <I2C_Slave_Init>:
void I2C_Slave_Init(uint8_t data){
	// PC4 -> SDA (Datos Seriales)
	// PC5 -> SCL (Reloj Serial)
	
	// Pines de Transmision como entrada
	DDRC &= ~((1<<DDC4)|(1<<DDC5));
  90:	97 b1       	in	r25, 0x07	; 7
  92:	9f 7c       	andi	r25, 0xCF	; 207
  94:	97 b9       	out	0x07, r25	; 7
	
	TWAR = data << 1 & 0b11111110;	// Se asigna la direccion que tendra
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	88 0f       	add	r24, r24
  9a:	99 1f       	adc	r25, r25
  9c:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	//TWAR = (address<<1|0x01);	// Se asigna la direccion que tendra y habilita la llamada general
	
	// Habilita la interfaz, ACK automatico, Habilita ISR
	TWCR = (1<<TWEA)|(1<<TWEN)|(1<<TWIE);
  a0:	85 e4       	ldi	r24, 0x45	; 69
  a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  a6:	08 95       	ret

000000a8 <main>:



int main(void)
{
	cli();
  a8:	f8 94       	cli
	
	DDRD |= (1<<DDD3);	// Trigger como output
  aa:	8a b1       	in	r24, 0x0a	; 10
  ac:	88 60       	ori	r24, 0x08	; 8
  ae:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1<<DDD2);	// Echo como input
  b0:	8a b1       	in	r24, 0x0a	; 10
  b2:	8b 7f       	andi	r24, 0xFB	; 251
  b4:	8a b9       	out	0x0a, r24	; 10
	
	PORTD &= ~((1<<PORTD2)|(1<<PORTD3));	// Ambos apagados
  b6:	8b b1       	in	r24, 0x0b	; 11
  b8:	83 7f       	andi	r24, 0xF3	; 243
  ba:	8b b9       	out	0x0b, r24	; 11
	
	TCCR1A = 0x00;
  bc:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B |= (1<<CS11);	// Prescaler de 8
  c0:	e1 e8       	ldi	r30, 0x81	; 129
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	82 60       	ori	r24, 0x02	; 2
  c8:	80 83       	st	Z, r24
	
	I2C_Slave_Init(0x20);		// Configura direccion del Slave
  ca:	80 e2       	ldi	r24, 0x20	; 32
  cc:	0e 94 48 00 	call	0x90	; 0x90 <I2C_Slave_Init>
	
	
	sei();
  d0:	78 94       	sei
	
	while (1)
	{
		// Generamos el pulso del TRIG
		PORTD |= (1<<PORTD3);
  d2:	8b b1       	in	r24, 0x0b	; 11
  d4:	88 60       	ori	r24, 0x08	; 8
  d6:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	85 e3       	ldi	r24, 0x35	; 53
  da:	8a 95       	dec	r24
  dc:	f1 f7       	brne	.-4      	; 0xda <main+0x32>
  de:	00 00       	nop
		_delay_us(10);
		PORTD &= ~(1<<PORTD3);
  e0:	8b b1       	in	r24, 0x0b	; 11
  e2:	87 7f       	andi	r24, 0xF7	; 247
  e4:	8b b9       	out	0x0b, r24	; 11
		
		// Esperamos la entrada en echo
		while((PIND & (1<<PIND2))==0);
  e6:	4a 9b       	sbis	0x09, 2	; 9
  e8:	fe cf       	rjmp	.-4      	; 0xe6 <main+0x3e>
		TCNT1 = 0;
  ea:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  ee:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
		while(PIND & (1<<PIND2));
  f2:	4a 99       	sbic	0x09, 2	; 9
  f4:	fe cf       	rjmp	.-4      	; 0xf2 <main+0x4a>
		
		// Calculamos la distancia
		tiempo = TCNT1 * 0.5;
  f6:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
  fa:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 96 01 	call	0x32c	; 0x32c <__floatunsisf>
 106:	20 e0       	ldi	r18, 0x00	; 0
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	40 e0       	ldi	r20, 0x00	; 0
 10c:	5f e3       	ldi	r21, 0x3F	; 63
 10e:	0e 94 24 02 	call	0x448	; 0x448 <__mulsf3>
 112:	0e 94 67 01 	call	0x2ce	; 0x2ce <__fixunssfsi>
 116:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 11a:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
		distancia = tiempo/58.2;
 11e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 122:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 96 01 	call	0x32c	; 0x32c <__floatunsisf>
 12e:	2d ec       	ldi	r18, 0xCD	; 205
 130:	3c ec       	ldi	r19, 0xCC	; 204
 132:	48 e6       	ldi	r20, 0x68	; 104
 134:	52 e4       	ldi	r21, 0x42	; 66
 136:	0e 94 f5 00 	call	0x1ea	; 0x1ea <__divsf3>
 13a:	0e 94 67 01 	call	0x2ce	; 0x2ce <__fixunssfsi>
 13e:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <distancia+0x1>
 142:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <distancia>
	}
 146:	c5 cf       	rjmp	.-118    	; 0xd2 <main+0x2a>

00000148 <__vector_24>:
/****************************************************************************************
* Interrupciones ISR
****************************************************************************************/


ISR(TWI_vect){
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	8f 93       	push	r24
 154:	9f 93       	push	r25
 156:	ef 93       	push	r30
 158:	ff 93       	push	r31
	uint8_t state;
	
	// Lee el estado del bus de datos
	state = TWSR & 0xFC;
 15a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 15e:	8c 7f       	andi	r24, 0xFC	; 252
	
	switch(state){
 160:	80 39       	cpi	r24, 0x90	; 144
 162:	c9 f0       	breq	.+50     	; 0x196 <__vector_24+0x4e>
 164:	38 f4       	brcc	.+14     	; 0x174 <__vector_24+0x2c>
 166:	80 37       	cpi	r24, 0x70	; 112
 168:	81 f0       	breq	.+32     	; 0x18a <__vector_24+0x42>
 16a:	80 38       	cpi	r24, 0x80	; 128
 16c:	a1 f0       	breq	.+40     	; 0x196 <__vector_24+0x4e>
 16e:	80 36       	cpi	r24, 0x60	; 96
 170:	71 f5       	brne	.+92     	; 0x1ce <__vector_24+0x86>
 172:	0b c0       	rjmp	.+22     	; 0x18a <__vector_24+0x42>
 174:	88 3b       	cpi	r24, 0xB8	; 184
 176:	c9 f0       	breq	.+50     	; 0x1aa <__vector_24+0x62>
 178:	18 f4       	brcc	.+6      	; 0x180 <__vector_24+0x38>
 17a:	88 3a       	cpi	r24, 0xA8	; 168
 17c:	b1 f0       	breq	.+44     	; 0x1aa <__vector_24+0x62>
 17e:	27 c0       	rjmp	.+78     	; 0x1ce <__vector_24+0x86>
 180:	80 3c       	cpi	r24, 0xC0	; 192
 182:	f9 f0       	breq	.+62     	; 0x1c2 <__vector_24+0x7a>
 184:	88 3c       	cpi	r24, 0xC8	; 200
 186:	e9 f0       	breq	.+58     	; 0x1c2 <__vector_24+0x7a>
 188:	22 c0       	rjmp	.+68     	; 0x1ce <__vector_24+0x86>
		case 0x60:
		case 0x70:
		TWCR |= (1 << TWINT);
 18a:	ec eb       	ldi	r30, 0xBC	; 188
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	80 68       	ori	r24, 0x80	; 128
 192:	80 83       	st	Z, r24
		break;
 194:	21 c0       	rjmp	.+66     	; 0x1d8 <__vector_24+0x90>
		case 0x80:
		case 0x90:
		data = TWDR;  // Recibió el dato, llamada general
 196:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 19a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <data>
		TWCR |= (1 << TWINT);
 19e:	ec eb       	ldi	r30, 0xBC	; 188
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	80 68       	ori	r24, 0x80	; 128
 1a6:	80 83       	st	Z, r24
		break;
 1a8:	17 c0       	rjmp	.+46     	; 0x1d8 <__vector_24+0x90>
		case 0xA8: // SLA+R recibido, Master mode Lecture
		case 0xB8: // Dato transmitido y ACK recibido
		TWDR = distancia; // Carga el dato en el registro de datos
 1aa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <distancia>
 1ae:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <distancia+0x1>
 1b2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR |= (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA); // Listo para la próxima operación
 1b6:	ec eb       	ldi	r30, 0xBC	; 188
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	80 81       	ld	r24, Z
 1bc:	85 6c       	ori	r24, 0xC5	; 197
 1be:	80 83       	st	Z, r24
		break;
 1c0:	0b c0       	rjmp	.+22     	; 0x1d8 <__vector_24+0x90>
		case 0xC0: // Dato transmitido y NACK recibido
		case 0xC8: // Último dato transmitido y ACK recibido
		TWCR |= (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
 1c2:	ec eb       	ldi	r30, 0xBC	; 188
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	84 6c       	ori	r24, 0xC4	; 196
 1ca:	80 83       	st	Z, r24
		break;
 1cc:	05 c0       	rjmp	.+10     	; 0x1d8 <__vector_24+0x90>
		default: // Libera el BUS de datos
		TWCR |= (1 << TWINT) | (1 << TWSTO);
 1ce:	ec eb       	ldi	r30, 0xBC	; 188
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	80 69       	ori	r24, 0x90	; 144
 1d6:	80 83       	st	Z, r24
		break;
	}
}
 1d8:	ff 91       	pop	r31
 1da:	ef 91       	pop	r30
 1dc:	9f 91       	pop	r25
 1de:	8f 91       	pop	r24
 1e0:	0f 90       	pop	r0
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	0f 90       	pop	r0
 1e6:	1f 90       	pop	r1
 1e8:	18 95       	reti

000001ea <__divsf3>:
 1ea:	0e 94 09 01 	call	0x212	; 0x212 <__divsf3x>
 1ee:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__fp_round>
 1f2:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__fp_pscB>
 1f6:	58 f0       	brcs	.+22     	; 0x20e <__divsf3+0x24>
 1f8:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <__fp_pscA>
 1fc:	40 f0       	brcs	.+16     	; 0x20e <__divsf3+0x24>
 1fe:	29 f4       	brne	.+10     	; 0x20a <__divsf3+0x20>
 200:	5f 3f       	cpi	r21, 0xFF	; 255
 202:	29 f0       	breq	.+10     	; 0x20e <__divsf3+0x24>
 204:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <__fp_inf>
 208:	51 11       	cpse	r21, r1
 20a:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__fp_szero>
 20e:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__fp_nan>

00000212 <__divsf3x>:
 212:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <__fp_split3>
 216:	68 f3       	brcs	.-38     	; 0x1f2 <__divsf3+0x8>

00000218 <__divsf3_pse>:
 218:	99 23       	and	r25, r25
 21a:	b1 f3       	breq	.-20     	; 0x208 <__divsf3+0x1e>
 21c:	55 23       	and	r21, r21
 21e:	91 f3       	breq	.-28     	; 0x204 <__divsf3+0x1a>
 220:	95 1b       	sub	r25, r21
 222:	55 0b       	sbc	r21, r21
 224:	bb 27       	eor	r27, r27
 226:	aa 27       	eor	r26, r26
 228:	62 17       	cp	r22, r18
 22a:	73 07       	cpc	r23, r19
 22c:	84 07       	cpc	r24, r20
 22e:	38 f0       	brcs	.+14     	; 0x23e <__divsf3_pse+0x26>
 230:	9f 5f       	subi	r25, 0xFF	; 255
 232:	5f 4f       	sbci	r21, 0xFF	; 255
 234:	22 0f       	add	r18, r18
 236:	33 1f       	adc	r19, r19
 238:	44 1f       	adc	r20, r20
 23a:	aa 1f       	adc	r26, r26
 23c:	a9 f3       	breq	.-22     	; 0x228 <__divsf3_pse+0x10>
 23e:	35 d0       	rcall	.+106    	; 0x2aa <__divsf3_pse+0x92>
 240:	0e 2e       	mov	r0, r30
 242:	3a f0       	brmi	.+14     	; 0x252 <__divsf3_pse+0x3a>
 244:	e0 e8       	ldi	r30, 0x80	; 128
 246:	32 d0       	rcall	.+100    	; 0x2ac <__divsf3_pse+0x94>
 248:	91 50       	subi	r25, 0x01	; 1
 24a:	50 40       	sbci	r21, 0x00	; 0
 24c:	e6 95       	lsr	r30
 24e:	00 1c       	adc	r0, r0
 250:	ca f7       	brpl	.-14     	; 0x244 <__divsf3_pse+0x2c>
 252:	2b d0       	rcall	.+86     	; 0x2aa <__divsf3_pse+0x92>
 254:	fe 2f       	mov	r31, r30
 256:	29 d0       	rcall	.+82     	; 0x2aa <__divsf3_pse+0x92>
 258:	66 0f       	add	r22, r22
 25a:	77 1f       	adc	r23, r23
 25c:	88 1f       	adc	r24, r24
 25e:	bb 1f       	adc	r27, r27
 260:	26 17       	cp	r18, r22
 262:	37 07       	cpc	r19, r23
 264:	48 07       	cpc	r20, r24
 266:	ab 07       	cpc	r26, r27
 268:	b0 e8       	ldi	r27, 0x80	; 128
 26a:	09 f0       	breq	.+2      	; 0x26e <__divsf3_pse+0x56>
 26c:	bb 0b       	sbc	r27, r27
 26e:	80 2d       	mov	r24, r0
 270:	bf 01       	movw	r22, r30
 272:	ff 27       	eor	r31, r31
 274:	93 58       	subi	r25, 0x83	; 131
 276:	5f 4f       	sbci	r21, 0xFF	; 255
 278:	3a f0       	brmi	.+14     	; 0x288 <__divsf3_pse+0x70>
 27a:	9e 3f       	cpi	r25, 0xFE	; 254
 27c:	51 05       	cpc	r21, r1
 27e:	78 f0       	brcs	.+30     	; 0x29e <__divsf3_pse+0x86>
 280:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <__fp_inf>
 284:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__fp_szero>
 288:	5f 3f       	cpi	r21, 0xFF	; 255
 28a:	e4 f3       	brlt	.-8      	; 0x284 <__divsf3_pse+0x6c>
 28c:	98 3e       	cpi	r25, 0xE8	; 232
 28e:	d4 f3       	brlt	.-12     	; 0x284 <__divsf3_pse+0x6c>
 290:	86 95       	lsr	r24
 292:	77 95       	ror	r23
 294:	67 95       	ror	r22
 296:	b7 95       	ror	r27
 298:	f7 95       	ror	r31
 29a:	9f 5f       	subi	r25, 0xFF	; 255
 29c:	c9 f7       	brne	.-14     	; 0x290 <__divsf3_pse+0x78>
 29e:	88 0f       	add	r24, r24
 2a0:	91 1d       	adc	r25, r1
 2a2:	96 95       	lsr	r25
 2a4:	87 95       	ror	r24
 2a6:	97 f9       	bld	r25, 7
 2a8:	08 95       	ret
 2aa:	e1 e0       	ldi	r30, 0x01	; 1
 2ac:	66 0f       	add	r22, r22
 2ae:	77 1f       	adc	r23, r23
 2b0:	88 1f       	adc	r24, r24
 2b2:	bb 1f       	adc	r27, r27
 2b4:	62 17       	cp	r22, r18
 2b6:	73 07       	cpc	r23, r19
 2b8:	84 07       	cpc	r24, r20
 2ba:	ba 07       	cpc	r27, r26
 2bc:	20 f0       	brcs	.+8      	; 0x2c6 <__divsf3_pse+0xae>
 2be:	62 1b       	sub	r22, r18
 2c0:	73 0b       	sbc	r23, r19
 2c2:	84 0b       	sbc	r24, r20
 2c4:	ba 0b       	sbc	r27, r26
 2c6:	ee 1f       	adc	r30, r30
 2c8:	88 f7       	brcc	.-30     	; 0x2ac <__divsf3_pse+0x94>
 2ca:	e0 95       	com	r30
 2cc:	08 95       	ret

000002ce <__fixunssfsi>:
 2ce:	0e 94 03 02 	call	0x406	; 0x406 <__fp_splitA>
 2d2:	88 f0       	brcs	.+34     	; 0x2f6 <__fixunssfsi+0x28>
 2d4:	9f 57       	subi	r25, 0x7F	; 127
 2d6:	98 f0       	brcs	.+38     	; 0x2fe <__fixunssfsi+0x30>
 2d8:	b9 2f       	mov	r27, r25
 2da:	99 27       	eor	r25, r25
 2dc:	b7 51       	subi	r27, 0x17	; 23
 2de:	b0 f0       	brcs	.+44     	; 0x30c <__fixunssfsi+0x3e>
 2e0:	e1 f0       	breq	.+56     	; 0x31a <__fixunssfsi+0x4c>
 2e2:	66 0f       	add	r22, r22
 2e4:	77 1f       	adc	r23, r23
 2e6:	88 1f       	adc	r24, r24
 2e8:	99 1f       	adc	r25, r25
 2ea:	1a f0       	brmi	.+6      	; 0x2f2 <__fixunssfsi+0x24>
 2ec:	ba 95       	dec	r27
 2ee:	c9 f7       	brne	.-14     	; 0x2e2 <__fixunssfsi+0x14>
 2f0:	14 c0       	rjmp	.+40     	; 0x31a <__fixunssfsi+0x4c>
 2f2:	b1 30       	cpi	r27, 0x01	; 1
 2f4:	91 f0       	breq	.+36     	; 0x31a <__fixunssfsi+0x4c>
 2f6:	0e 94 1d 02 	call	0x43a	; 0x43a <__fp_zero>
 2fa:	b1 e0       	ldi	r27, 0x01	; 1
 2fc:	08 95       	ret
 2fe:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__fp_zero>
 302:	67 2f       	mov	r22, r23
 304:	78 2f       	mov	r23, r24
 306:	88 27       	eor	r24, r24
 308:	b8 5f       	subi	r27, 0xF8	; 248
 30a:	39 f0       	breq	.+14     	; 0x31a <__fixunssfsi+0x4c>
 30c:	b9 3f       	cpi	r27, 0xF9	; 249
 30e:	cc f3       	brlt	.-14     	; 0x302 <__fixunssfsi+0x34>
 310:	86 95       	lsr	r24
 312:	77 95       	ror	r23
 314:	67 95       	ror	r22
 316:	b3 95       	inc	r27
 318:	d9 f7       	brne	.-10     	; 0x310 <__fixunssfsi+0x42>
 31a:	3e f4       	brtc	.+14     	; 0x32a <__fixunssfsi+0x5c>
 31c:	90 95       	com	r25
 31e:	80 95       	com	r24
 320:	70 95       	com	r23
 322:	61 95       	neg	r22
 324:	7f 4f       	sbci	r23, 0xFF	; 255
 326:	8f 4f       	sbci	r24, 0xFF	; 255
 328:	9f 4f       	sbci	r25, 0xFF	; 255
 32a:	08 95       	ret

0000032c <__floatunsisf>:
 32c:	e8 94       	clt
 32e:	09 c0       	rjmp	.+18     	; 0x342 <__floatsisf+0x12>

00000330 <__floatsisf>:
 330:	97 fb       	bst	r25, 7
 332:	3e f4       	brtc	.+14     	; 0x342 <__floatsisf+0x12>
 334:	90 95       	com	r25
 336:	80 95       	com	r24
 338:	70 95       	com	r23
 33a:	61 95       	neg	r22
 33c:	7f 4f       	sbci	r23, 0xFF	; 255
 33e:	8f 4f       	sbci	r24, 0xFF	; 255
 340:	9f 4f       	sbci	r25, 0xFF	; 255
 342:	99 23       	and	r25, r25
 344:	a9 f0       	breq	.+42     	; 0x370 <__floatsisf+0x40>
 346:	f9 2f       	mov	r31, r25
 348:	96 e9       	ldi	r25, 0x96	; 150
 34a:	bb 27       	eor	r27, r27
 34c:	93 95       	inc	r25
 34e:	f6 95       	lsr	r31
 350:	87 95       	ror	r24
 352:	77 95       	ror	r23
 354:	67 95       	ror	r22
 356:	b7 95       	ror	r27
 358:	f1 11       	cpse	r31, r1
 35a:	f8 cf       	rjmp	.-16     	; 0x34c <__floatsisf+0x1c>
 35c:	fa f4       	brpl	.+62     	; 0x39c <__floatsisf+0x6c>
 35e:	bb 0f       	add	r27, r27
 360:	11 f4       	brne	.+4      	; 0x366 <__floatsisf+0x36>
 362:	60 ff       	sbrs	r22, 0
 364:	1b c0       	rjmp	.+54     	; 0x39c <__floatsisf+0x6c>
 366:	6f 5f       	subi	r22, 0xFF	; 255
 368:	7f 4f       	sbci	r23, 0xFF	; 255
 36a:	8f 4f       	sbci	r24, 0xFF	; 255
 36c:	9f 4f       	sbci	r25, 0xFF	; 255
 36e:	16 c0       	rjmp	.+44     	; 0x39c <__floatsisf+0x6c>
 370:	88 23       	and	r24, r24
 372:	11 f0       	breq	.+4      	; 0x378 <__floatsisf+0x48>
 374:	96 e9       	ldi	r25, 0x96	; 150
 376:	11 c0       	rjmp	.+34     	; 0x39a <__floatsisf+0x6a>
 378:	77 23       	and	r23, r23
 37a:	21 f0       	breq	.+8      	; 0x384 <__floatsisf+0x54>
 37c:	9e e8       	ldi	r25, 0x8E	; 142
 37e:	87 2f       	mov	r24, r23
 380:	76 2f       	mov	r23, r22
 382:	05 c0       	rjmp	.+10     	; 0x38e <__floatsisf+0x5e>
 384:	66 23       	and	r22, r22
 386:	71 f0       	breq	.+28     	; 0x3a4 <__floatsisf+0x74>
 388:	96 e8       	ldi	r25, 0x86	; 134
 38a:	86 2f       	mov	r24, r22
 38c:	70 e0       	ldi	r23, 0x00	; 0
 38e:	60 e0       	ldi	r22, 0x00	; 0
 390:	2a f0       	brmi	.+10     	; 0x39c <__floatsisf+0x6c>
 392:	9a 95       	dec	r25
 394:	66 0f       	add	r22, r22
 396:	77 1f       	adc	r23, r23
 398:	88 1f       	adc	r24, r24
 39a:	da f7       	brpl	.-10     	; 0x392 <__floatsisf+0x62>
 39c:	88 0f       	add	r24, r24
 39e:	96 95       	lsr	r25
 3a0:	87 95       	ror	r24
 3a2:	97 f9       	bld	r25, 7
 3a4:	08 95       	ret

000003a6 <__fp_inf>:
 3a6:	97 f9       	bld	r25, 7
 3a8:	9f 67       	ori	r25, 0x7F	; 127
 3aa:	80 e8       	ldi	r24, 0x80	; 128
 3ac:	70 e0       	ldi	r23, 0x00	; 0
 3ae:	60 e0       	ldi	r22, 0x00	; 0
 3b0:	08 95       	ret

000003b2 <__fp_nan>:
 3b2:	9f ef       	ldi	r25, 0xFF	; 255
 3b4:	80 ec       	ldi	r24, 0xC0	; 192
 3b6:	08 95       	ret

000003b8 <__fp_pscA>:
 3b8:	00 24       	eor	r0, r0
 3ba:	0a 94       	dec	r0
 3bc:	16 16       	cp	r1, r22
 3be:	17 06       	cpc	r1, r23
 3c0:	18 06       	cpc	r1, r24
 3c2:	09 06       	cpc	r0, r25
 3c4:	08 95       	ret

000003c6 <__fp_pscB>:
 3c6:	00 24       	eor	r0, r0
 3c8:	0a 94       	dec	r0
 3ca:	12 16       	cp	r1, r18
 3cc:	13 06       	cpc	r1, r19
 3ce:	14 06       	cpc	r1, r20
 3d0:	05 06       	cpc	r0, r21
 3d2:	08 95       	ret

000003d4 <__fp_round>:
 3d4:	09 2e       	mov	r0, r25
 3d6:	03 94       	inc	r0
 3d8:	00 0c       	add	r0, r0
 3da:	11 f4       	brne	.+4      	; 0x3e0 <__fp_round+0xc>
 3dc:	88 23       	and	r24, r24
 3de:	52 f0       	brmi	.+20     	; 0x3f4 <__fp_round+0x20>
 3e0:	bb 0f       	add	r27, r27
 3e2:	40 f4       	brcc	.+16     	; 0x3f4 <__fp_round+0x20>
 3e4:	bf 2b       	or	r27, r31
 3e6:	11 f4       	brne	.+4      	; 0x3ec <__fp_round+0x18>
 3e8:	60 ff       	sbrs	r22, 0
 3ea:	04 c0       	rjmp	.+8      	; 0x3f4 <__fp_round+0x20>
 3ec:	6f 5f       	subi	r22, 0xFF	; 255
 3ee:	7f 4f       	sbci	r23, 0xFF	; 255
 3f0:	8f 4f       	sbci	r24, 0xFF	; 255
 3f2:	9f 4f       	sbci	r25, 0xFF	; 255
 3f4:	08 95       	ret

000003f6 <__fp_split3>:
 3f6:	57 fd       	sbrc	r21, 7
 3f8:	90 58       	subi	r25, 0x80	; 128
 3fa:	44 0f       	add	r20, r20
 3fc:	55 1f       	adc	r21, r21
 3fe:	59 f0       	breq	.+22     	; 0x416 <__fp_splitA+0x10>
 400:	5f 3f       	cpi	r21, 0xFF	; 255
 402:	71 f0       	breq	.+28     	; 0x420 <__fp_splitA+0x1a>
 404:	47 95       	ror	r20

00000406 <__fp_splitA>:
 406:	88 0f       	add	r24, r24
 408:	97 fb       	bst	r25, 7
 40a:	99 1f       	adc	r25, r25
 40c:	61 f0       	breq	.+24     	; 0x426 <__fp_splitA+0x20>
 40e:	9f 3f       	cpi	r25, 0xFF	; 255
 410:	79 f0       	breq	.+30     	; 0x430 <__fp_splitA+0x2a>
 412:	87 95       	ror	r24
 414:	08 95       	ret
 416:	12 16       	cp	r1, r18
 418:	13 06       	cpc	r1, r19
 41a:	14 06       	cpc	r1, r20
 41c:	55 1f       	adc	r21, r21
 41e:	f2 cf       	rjmp	.-28     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 420:	46 95       	lsr	r20
 422:	f1 df       	rcall	.-30     	; 0x406 <__fp_splitA>
 424:	08 c0       	rjmp	.+16     	; 0x436 <__fp_splitA+0x30>
 426:	16 16       	cp	r1, r22
 428:	17 06       	cpc	r1, r23
 42a:	18 06       	cpc	r1, r24
 42c:	99 1f       	adc	r25, r25
 42e:	f1 cf       	rjmp	.-30     	; 0x412 <__fp_splitA+0xc>
 430:	86 95       	lsr	r24
 432:	71 05       	cpc	r23, r1
 434:	61 05       	cpc	r22, r1
 436:	08 94       	sec
 438:	08 95       	ret

0000043a <__fp_zero>:
 43a:	e8 94       	clt

0000043c <__fp_szero>:
 43c:	bb 27       	eor	r27, r27
 43e:	66 27       	eor	r22, r22
 440:	77 27       	eor	r23, r23
 442:	cb 01       	movw	r24, r22
 444:	97 f9       	bld	r25, 7
 446:	08 95       	ret

00000448 <__mulsf3>:
 448:	0e 94 37 02 	call	0x46e	; 0x46e <__mulsf3x>
 44c:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__fp_round>
 450:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <__fp_pscA>
 454:	38 f0       	brcs	.+14     	; 0x464 <__mulsf3+0x1c>
 456:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__fp_pscB>
 45a:	20 f0       	brcs	.+8      	; 0x464 <__mulsf3+0x1c>
 45c:	95 23       	and	r25, r21
 45e:	11 f0       	breq	.+4      	; 0x464 <__mulsf3+0x1c>
 460:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <__fp_inf>
 464:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__fp_nan>
 468:	11 24       	eor	r1, r1
 46a:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__fp_szero>

0000046e <__mulsf3x>:
 46e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <__fp_split3>
 472:	70 f3       	brcs	.-36     	; 0x450 <__mulsf3+0x8>

00000474 <__mulsf3_pse>:
 474:	95 9f       	mul	r25, r21
 476:	c1 f3       	breq	.-16     	; 0x468 <__mulsf3+0x20>
 478:	95 0f       	add	r25, r21
 47a:	50 e0       	ldi	r21, 0x00	; 0
 47c:	55 1f       	adc	r21, r21
 47e:	62 9f       	mul	r22, r18
 480:	f0 01       	movw	r30, r0
 482:	72 9f       	mul	r23, r18
 484:	bb 27       	eor	r27, r27
 486:	f0 0d       	add	r31, r0
 488:	b1 1d       	adc	r27, r1
 48a:	63 9f       	mul	r22, r19
 48c:	aa 27       	eor	r26, r26
 48e:	f0 0d       	add	r31, r0
 490:	b1 1d       	adc	r27, r1
 492:	aa 1f       	adc	r26, r26
 494:	64 9f       	mul	r22, r20
 496:	66 27       	eor	r22, r22
 498:	b0 0d       	add	r27, r0
 49a:	a1 1d       	adc	r26, r1
 49c:	66 1f       	adc	r22, r22
 49e:	82 9f       	mul	r24, r18
 4a0:	22 27       	eor	r18, r18
 4a2:	b0 0d       	add	r27, r0
 4a4:	a1 1d       	adc	r26, r1
 4a6:	62 1f       	adc	r22, r18
 4a8:	73 9f       	mul	r23, r19
 4aa:	b0 0d       	add	r27, r0
 4ac:	a1 1d       	adc	r26, r1
 4ae:	62 1f       	adc	r22, r18
 4b0:	83 9f       	mul	r24, r19
 4b2:	a0 0d       	add	r26, r0
 4b4:	61 1d       	adc	r22, r1
 4b6:	22 1f       	adc	r18, r18
 4b8:	74 9f       	mul	r23, r20
 4ba:	33 27       	eor	r19, r19
 4bc:	a0 0d       	add	r26, r0
 4be:	61 1d       	adc	r22, r1
 4c0:	23 1f       	adc	r18, r19
 4c2:	84 9f       	mul	r24, r20
 4c4:	60 0d       	add	r22, r0
 4c6:	21 1d       	adc	r18, r1
 4c8:	82 2f       	mov	r24, r18
 4ca:	76 2f       	mov	r23, r22
 4cc:	6a 2f       	mov	r22, r26
 4ce:	11 24       	eor	r1, r1
 4d0:	9f 57       	subi	r25, 0x7F	; 127
 4d2:	50 40       	sbci	r21, 0x00	; 0
 4d4:	9a f0       	brmi	.+38     	; 0x4fc <__mulsf3_pse+0x88>
 4d6:	f1 f0       	breq	.+60     	; 0x514 <__mulsf3_pse+0xa0>
 4d8:	88 23       	and	r24, r24
 4da:	4a f0       	brmi	.+18     	; 0x4ee <__mulsf3_pse+0x7a>
 4dc:	ee 0f       	add	r30, r30
 4de:	ff 1f       	adc	r31, r31
 4e0:	bb 1f       	adc	r27, r27
 4e2:	66 1f       	adc	r22, r22
 4e4:	77 1f       	adc	r23, r23
 4e6:	88 1f       	adc	r24, r24
 4e8:	91 50       	subi	r25, 0x01	; 1
 4ea:	50 40       	sbci	r21, 0x00	; 0
 4ec:	a9 f7       	brne	.-22     	; 0x4d8 <__mulsf3_pse+0x64>
 4ee:	9e 3f       	cpi	r25, 0xFE	; 254
 4f0:	51 05       	cpc	r21, r1
 4f2:	80 f0       	brcs	.+32     	; 0x514 <__mulsf3_pse+0xa0>
 4f4:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <__fp_inf>
 4f8:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__fp_szero>
 4fc:	5f 3f       	cpi	r21, 0xFF	; 255
 4fe:	e4 f3       	brlt	.-8      	; 0x4f8 <__mulsf3_pse+0x84>
 500:	98 3e       	cpi	r25, 0xE8	; 232
 502:	d4 f3       	brlt	.-12     	; 0x4f8 <__mulsf3_pse+0x84>
 504:	86 95       	lsr	r24
 506:	77 95       	ror	r23
 508:	67 95       	ror	r22
 50a:	b7 95       	ror	r27
 50c:	f7 95       	ror	r31
 50e:	e7 95       	ror	r30
 510:	9f 5f       	subi	r25, 0xFF	; 255
 512:	c1 f7       	brne	.-16     	; 0x504 <__mulsf3_pse+0x90>
 514:	fe 2b       	or	r31, r30
 516:	88 0f       	add	r24, r24
 518:	91 1d       	adc	r25, r1
 51a:	96 95       	lsr	r25
 51c:	87 95       	ror	r24
 51e:	97 f9       	bld	r25, 7
 520:	08 95       	ret

00000522 <_exit>:
 522:	f8 94       	cli

00000524 <__stop_program>:
 524:	ff cf       	rjmp	.-2      	; 0x524 <__stop_program>
