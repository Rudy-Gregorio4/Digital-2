
Slave1(leds).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000232  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000232  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000086f  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000726  00000000  00000000  00000b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000401  00000000  00000000  000012b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  000016b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000448  00000000  00000000  00001780  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d3  00000000  00000000  00001bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001c9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <main>
  88:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <I2C_start>:
  90:	84 ea       	ldi	r24, 0xA4	; 164
  92:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  96:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  9a:	88 23       	and	r24, r24
  9c:	e4 f7       	brge	.-8      	; 0x96 <I2C_start+0x6>
  9e:	08 95       	ret

000000a0 <I2C_stop>:
  a0:	84 e9       	ldi	r24, 0x94	; 148
  a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  a6:	08 95       	ret

000000a8 <I2C_write>:
  a8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  ac:	84 e8       	ldi	r24, 0x84	; 132
  ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b6:	88 23       	and	r24, r24
  b8:	e4 f7       	brge	.-8      	; 0xb2 <I2C_write+0xa>
  ba:	08 95       	ret

000000bc <__vector_3>:
    I2C_Config_SLAVE(SLAVE_ADDRESS);
    
	sei(); // Activar interrupciones
}

ISR(PCINT0_vect) {
  bc:	1f 92       	push	r1
  be:	0f 92       	push	r0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	0f 92       	push	r0
  c4:	11 24       	eor	r1, r1
  c6:	8f 93       	push	r24
  c8:	9f 93       	push	r25
    
    if (!(PINB & (1 << PINB0))) {
  ca:	18 99       	sbic	0x03, 0	; 3
  cc:	19 c0       	rjmp	.+50     	; 0x100 <__vector_3+0x44>
        count++;
  ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  d6:	01 96       	adiw	r24, 0x01	; 1
  d8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  dc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        if (count > 15) {
  e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  e8:	40 97       	sbiw	r24, 0x10	; 16
  ea:	24 f0       	brlt	.+8      	; 0xf4 <__vector_3+0x38>
            count = 0;
  ec:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  f0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
        }
        PORTD = count;
  f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  fc:	8b b9       	out	0x0b, r24	; 11
  fe:	1c c0       	rjmp	.+56     	; 0x138 <__vector_3+0x7c>
        //send_count_via_i2c();
    } else if (!(PINB & (1 << PINB1))) {
 100:	19 99       	sbic	0x03, 1	; 3
 102:	1a c0       	rjmp	.+52     	; 0x138 <__vector_3+0x7c>
        count--;
 104:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 108:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 112:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        if (count < 0) {
 116:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 11a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 11e:	99 23       	and	r25, r25
 120:	34 f4       	brge	.+12     	; 0x12e <__vector_3+0x72>
            count = 15;
 122:	8f e0       	ldi	r24, 0x0F	; 15
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 12a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        }
        PORTD = count;
 12e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 132:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 136:	8b b9       	out	0x0b, r24	; 11
        //send_count_via_i2c();
    }
}
 138:	9f 91       	pop	r25
 13a:	8f 91       	pop	r24
 13c:	0f 90       	pop	r0
 13e:	0f be       	out	0x3f, r0	; 63
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti

00000146 <send_count_via_i2c>:

void send_count_via_i2c(void) {
    I2C_start();
 146:	0e 94 48 00 	call	0x90	; 0x90 <I2C_start>
    I2C_write(SLAVE_ADDRESS << 1); // Enviar direcci?n del esclavo con bit de escritura
 14a:	84 e4       	ldi	r24, 0x44	; 68
 14c:	0e 94 54 00 	call	0xa8	; 0xa8 <I2C_write>
    I2C_write(count); // Enviar el valor del contador
 150:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 154:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 158:	0e 94 54 00 	call	0xa8	; 0xa8 <I2C_write>
    I2C_stop();
 15c:	0e 94 50 00 	call	0xa0	; 0xa0 <I2C_stop>
 160:	08 95       	ret

00000162 <I2C_Config_SLAVE>:
}


// Funcion para la configuracion del I2C Slave
void I2C_Config_SLAVE(uint8_t address){
	DDRC &= ~((1<<DDC4) | (1<<DDC5));
 162:	97 b1       	in	r25, 0x07	; 7
 164:	9f 7c       	andi	r25, 0xCF	; 207
 166:	97 b9       	out	0x07, r25	; 7
	
	address <<= 1;  //Ubica la dirección y
 168:	88 0f       	add	r24, r24
	address |= 0x01; //habilita para reconocer las llamadas generales de I2C
 16a:	81 60       	ori	r24, 0x01	; 1
	TWAR = address;
 16c:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	
	TWCR = (1 << TWEA) | (1 << TWEN) | (1 << TWIE); //Habilita el BUS, con reconocimiento e interrupción
 170:	85 e4       	ldi	r24, 0x45	; 69
 172:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 176:	08 95       	ret

00000178 <setup>:
		
    }
}

void setup(void) {
    cli();
 178:	f8 94       	cli
    
    DDRB = 0b11111100;   // PB0 y PB1 como entrada
 17a:	8c ef       	ldi	r24, 0xFC	; 252
 17c:	84 b9       	out	0x04, r24	; 4
    PORTB = 0b00000011;  // Pull Up en PB0 y PB1
 17e:	83 e0       	ldi	r24, 0x03	; 3
 180:	85 b9       	out	0x05, r24	; 5
    
    DDRD = 0b11111111;   // Salida de LEDS
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	8a b9       	out	0x0a, r24	; 10
    PORTD = 0b00000000;  // LEDS apagado
 186:	1b b8       	out	0x0b, r1	; 11
    
    PCICR |= (1 << PCIE0); // Habilitar interrupciones de PCINT[7:0]
 188:	e8 e6       	ldi	r30, 0x68	; 104
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	81 60       	ori	r24, 0x01	; 1
 190:	80 83       	st	Z, r24
    PCMSK0 |=  (1 << PCINT1) | (1 << PCINT0); // Habilitar interrupci?n en PB1 y PB0
 192:	ab e6       	ldi	r26, 0x6B	; 107
 194:	b0 e0       	ldi	r27, 0x00	; 0
 196:	8c 91       	ld	r24, X
 198:	83 60       	ori	r24, 0x03	; 3
 19a:	8c 93       	st	X, r24
	
    PCICR |= (1<<PCIE0); // Mascara de interrupci?n
 19c:	80 81       	ld	r24, Z
 19e:	81 60       	ori	r24, 0x01	; 1
 1a0:	80 83       	st	Z, r24
    UCSR0B = 0;
 1a2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
    I2C_Config_SLAVE(SLAVE_ADDRESS);
 1a6:	82 e2       	ldi	r24, 0x22	; 34
 1a8:	0e 94 b1 00 	call	0x162	; 0x162 <I2C_Config_SLAVE>
    
	sei(); // Activar interrupciones
 1ac:	78 94       	sei
 1ae:	08 95       	ret

000001b0 <main>:
void I2C_Config_SLAVE(uint8_t address);

volatile int count = 0;

int main(void) {
    setup();
 1b0:	0e 94 bc 00 	call	0x178	; 0x178 <setup>
    
    while (1) {
        send_count_via_i2c();
 1b4:	0e 94 a3 00 	call	0x146	; 0x146 <send_count_via_i2c>
 1b8:	fd cf       	rjmp	.-6      	; 0x1b4 <main+0x4>

000001ba <_exit>:
 1ba:	f8 94       	cli

000001bc <__stop_program>:
 1bc:	ff cf       	rjmp	.-2      	; 0x1bc <__stop_program>
