
Lab6_UART_Nano.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000226  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000226  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000258  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000856  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000711  00000000  00000000  00000b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000369  00000000  00000000  0000124f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000114  00000000  00000000  000015b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f0  00000000  00000000  000016cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000204  00000000  00000000  00001abc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001cc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 81 00 	jmp	0x102	; 0x102 <__vector_3>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 be 00 	jmp	0x17c	; 0x17c <__vector_5>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 67 00 	call	0xce	; 0xce <main>
  78:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setup>:
    }
}

void setup(void) {
    // Configurar botones PB0-PB4 como entradas con pull-up
    DDRB &= ~((1 << DDB0) | (1 << DDB1) | (1 << DDB2) | (1 << DDB3) | (1 << DDB4)); 
  80:	84 b1       	in	r24, 0x04	; 4
  82:	80 7e       	andi	r24, 0xE0	; 224
  84:	84 b9       	out	0x04, r24	; 4
    PORTB |= (1 << PORTB0) | (1 << PORTB1) | (1 << PORTB2) | (1 << PORTB3) | (1 << PORTB4);
  86:	85 b1       	in	r24, 0x05	; 5
  88:	8f 61       	ori	r24, 0x1F	; 31
  8a:	85 b9       	out	0x05, r24	; 5

    // Configurar el botón en PD7 como entrada con pull-up
    DDRD &= ~(1 << DDD7); 
  8c:	8a b1       	in	r24, 0x0a	; 10
  8e:	8f 77       	andi	r24, 0x7F	; 127
  90:	8a b9       	out	0x0a, r24	; 10
    PORTD |= (1 << PORTD7);
  92:	8b b1       	in	r24, 0x0b	; 11
  94:	80 68       	ori	r24, 0x80	; 128
  96:	8b b9       	out	0x0b, r24	; 11

    // Habilitar PCINT0 para PB0-PB4 y PCINT23 para PD7
    PCICR |= (1 << PCIE0) | (1 << PCIE2);
  98:	e8 e6       	ldi	r30, 0x68	; 104
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	80 81       	ld	r24, Z
  9e:	85 60       	ori	r24, 0x05	; 5
  a0:	80 83       	st	Z, r24
    PCMSK0 |= (1 << PCINT0) | (1 << PCINT1) | (1 << PCINT2) | (1 << PCINT3) | (1 << PCINT4);
  a2:	eb e6       	ldi	r30, 0x6B	; 107
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	8f 61       	ori	r24, 0x1F	; 31
  aa:	80 83       	st	Z, r24
    PCMSK2 |= (1 << PCINT23);  // Habilitar interrupción para PD7
  ac:	ed e6       	ldi	r30, 0x6D	; 109
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	80 68       	ori	r24, 0x80	; 128
  b4:	80 83       	st	Z, r24
  b6:	08 95       	ret

000000b8 <UART_init>:
}

void UART_init(unsigned int ubrr) {
    UBRR0H = (unsigned char)(ubrr >> 8);
  b8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    UBRR0L = (unsigned char)ubrr;
  bc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    UCSR0B = (1 << TXEN0);    // Habilitar transmisor UART
  c0:	88 e0       	ldi	r24, 0x08	; 8
  c2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);  // Modo 8-bit
  c6:	86 e0       	ldi	r24, 0x06	; 6
  c8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  cc:	08 95       	ret

000000ce <main>:
void UART_init(unsigned int ubrr);
void UART_transmit(unsigned char data);
void debounce(void);

int main(void) {
    cli();    // Deshabilitar interrupciones globales
  ce:	f8 94       	cli
    setup();  // Configurar pines y UART
  d0:	0e 94 40 00 	call	0x80	; 0x80 <setup>
    UART_init(103);  // Inicializar UART a 9600 baudios
  d4:	87 e6       	ldi	r24, 0x67	; 103
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 5c 00 	call	0xb8	; 0xb8 <UART_init>
    sei();    // Habilitar interrupciones globales
  dc:	78 94       	sei
  de:	ff cf       	rjmp	.-2      	; 0xde <main+0x10>

000000e0 <UART_transmit>:
    UCSR0B = (1 << TXEN0);    // Habilitar transmisor UART
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);  // Modo 8-bit
}

void UART_transmit(unsigned char data) {
    while (!(UCSR0A & (1 << UDRE0)));  // Esperar a que el buffer esté libre
  e0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  e4:	95 ff       	sbrs	r25, 5
  e6:	fc cf       	rjmp	.-8      	; 0xe0 <UART_transmit>
    UDR0 = data;  // Enviar dato
  e8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  ec:	08 95       	ret

000000ee <debounce>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	2f ef       	ldi	r18, 0xFF	; 255
  f0:	80 e7       	ldi	r24, 0x70	; 112
  f2:	92 e0       	ldi	r25, 0x02	; 2
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	80 40       	sbci	r24, 0x00	; 0
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <debounce+0x6>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <debounce+0x10>
  fe:	00 00       	nop
 100:	08 95       	ret

00000102 <__vector_3>:

void debounce(void) {
    _delay_ms(50);
}

ISR(PCINT0_vect) {
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	2f 93       	push	r18
 10e:	3f 93       	push	r19
 110:	4f 93       	push	r20
 112:	5f 93       	push	r21
 114:	6f 93       	push	r22
 116:	7f 93       	push	r23
 118:	8f 93       	push	r24
 11a:	9f 93       	push	r25
 11c:	af 93       	push	r26
 11e:	bf 93       	push	r27
 120:	ef 93       	push	r30
 122:	ff 93       	push	r31
    debounce();
 124:	0e 94 77 00 	call	0xee	; 0xee <debounce>
    if (!(PINB & (1 << PINB0))) {
 128:	18 99       	sbic	0x03, 0	; 3
 12a:	03 c0       	rjmp	.+6      	; 0x132 <__vector_3+0x30>
        UART_transmit('U');  // PB0 -> 'U'
 12c:	85 e5       	ldi	r24, 0x55	; 85
 12e:	0e 94 70 00 	call	0xe0	; 0xe0 <UART_transmit>
    }
    if (!(PINB & (1 << PINB1))) {
 132:	19 99       	sbic	0x03, 1	; 3
 134:	03 c0       	rjmp	.+6      	; 0x13c <__vector_3+0x3a>
        UART_transmit('D');  // PB1 -> 'D'
 136:	84 e4       	ldi	r24, 0x44	; 68
 138:	0e 94 70 00 	call	0xe0	; 0xe0 <UART_transmit>
    }
    if (!(PINB & (1 << PINB2))) {
 13c:	1a 99       	sbic	0x03, 2	; 3
 13e:	03 c0       	rjmp	.+6      	; 0x146 <__vector_3+0x44>
        UART_transmit('L');  // PB2 -> 'L'
 140:	8c e4       	ldi	r24, 0x4C	; 76
 142:	0e 94 70 00 	call	0xe0	; 0xe0 <UART_transmit>
    }
    if (!(PINB & (1 << PINB3))) {
 146:	1b 99       	sbic	0x03, 3	; 3
 148:	03 c0       	rjmp	.+6      	; 0x150 <__vector_3+0x4e>
        UART_transmit('R');  // PB3 -> 'R'
 14a:	82 e5       	ldi	r24, 0x52	; 82
 14c:	0e 94 70 00 	call	0xe0	; 0xe0 <UART_transmit>
    }
    if (!(PINB & (1 << PINB4))) {
 150:	1c 99       	sbic	0x03, 4	; 3
 152:	03 c0       	rjmp	.+6      	; 0x15a <__vector_3+0x58>
        UART_transmit('A');  // PB4 -> 'A'
 154:	81 e4       	ldi	r24, 0x41	; 65
 156:	0e 94 70 00 	call	0xe0	; 0xe0 <UART_transmit>
    }
}
 15a:	ff 91       	pop	r31
 15c:	ef 91       	pop	r30
 15e:	bf 91       	pop	r27
 160:	af 91       	pop	r26
 162:	9f 91       	pop	r25
 164:	8f 91       	pop	r24
 166:	7f 91       	pop	r23
 168:	6f 91       	pop	r22
 16a:	5f 91       	pop	r21
 16c:	4f 91       	pop	r20
 16e:	3f 91       	pop	r19
 170:	2f 91       	pop	r18
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <__vector_5>:

ISR(PCINT2_vect) {
 17c:	1f 92       	push	r1
 17e:	0f 92       	push	r0
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	0f 92       	push	r0
 184:	11 24       	eor	r1, r1
 186:	2f 93       	push	r18
 188:	3f 93       	push	r19
 18a:	4f 93       	push	r20
 18c:	5f 93       	push	r21
 18e:	6f 93       	push	r22
 190:	7f 93       	push	r23
 192:	8f 93       	push	r24
 194:	9f 93       	push	r25
 196:	af 93       	push	r26
 198:	bf 93       	push	r27
 19a:	ef 93       	push	r30
 19c:	ff 93       	push	r31
    debounce();
 19e:	0e 94 77 00 	call	0xee	; 0xee <debounce>
    if (!(PIND & (1 << PIND7))) {
 1a2:	4f 99       	sbic	0x09, 7	; 9
 1a4:	03 c0       	rjmp	.+6      	; 0x1ac <__vector_5+0x30>
        UART_transmit('B');  // PD7 -> 'B'
 1a6:	82 e4       	ldi	r24, 0x42	; 66
 1a8:	0e 94 70 00 	call	0xe0	; 0xe0 <UART_transmit>
    }
 1ac:	ff 91       	pop	r31
 1ae:	ef 91       	pop	r30
 1b0:	bf 91       	pop	r27
 1b2:	af 91       	pop	r26
 1b4:	9f 91       	pop	r25
 1b6:	8f 91       	pop	r24
 1b8:	7f 91       	pop	r23
 1ba:	6f 91       	pop	r22
 1bc:	5f 91       	pop	r21
 1be:	4f 91       	pop	r20
 1c0:	3f 91       	pop	r19
 1c2:	2f 91       	pop	r18
 1c4:	0f 90       	pop	r0
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	0f 90       	pop	r0
 1ca:	1f 90       	pop	r1
 1cc:	18 95       	reti

000001ce <_exit>:
 1ce:	f8 94       	cli

000001d0 <__stop_program>:
 1d0:	ff cf       	rjmp	.-2      	; 0x1d0 <__stop_program>
